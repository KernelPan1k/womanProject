<?php

namespace Project\FrontBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Query;
use Project\FrontBundle\Entity\City;
use Project\FrontBundle\Entity\Region;

/**
 * TakenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TakenRepository extends EntityRepository
{
    /**
     * @param array $round
     *
     * @return Query
     */
    public function findByRadius(array $round = [])
    {
        $dql   = $this->baseTakenSearch().' AND c.cp IN(:round)';
        $query = $this->_em->createQuery($dql)->setParameter('now', new \DateTime())->setParameter('round', $round);

        return $query;
    }

    /**
     * @return string
     */
    private function baseTakenSearch()
    {
        $sql =
            "SELECT t, u, c, r FROM %s t 
              JOIN t.user u
              JOIN t.city c 
              JOIN c.region r
              WHERE t.startDate >= :now";
        $dql = sprintf($sql, $this->getClassName());

        return $dql;
    }

    /**
     * @param Region $region
     *
     * @return Query
     */
    public function findByRegion(Region $region)
    {
        $dql   = $this->baseTakenSearch().' AND r = :region';
        $query = $this->_em->createQuery($dql)->setParameter('now', new \DateTime())->setParameter('region', $region);

        return $query;
    }

    /**
     * @param City $city
     *
     * @return Query
     */
    public function findByCity(City $city)
    {
        $dql   = $this->baseTakenSearch().' AND c = :city';
        $query = $this->_em->createQuery($dql)->setParameter('now', new \DateTime())->setParameter('city', $city);

        return $query;
    }

    /**
     * @return Query
     */
    public function findTaken()
    {
        $dql   = $this->baseTakenSearch();
        $query = $this->_em->createQuery($dql)->setParameter('now', new \DateTime());

        return $query;
    }

    /**
     * @param string $slug
     *
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function findOneTakenBySlug(string $slug)
    {
        $dql   = $this->baseTakenCompleteSearch().' AND t.slug = :slug';
        $query = $this->getEntityManager()
            ->createQuery($dql)
            ->setParameter('now', new \DateTime())
            ->setParameter('slug', $slug);

        return $query->getOneOrNullResult();
    }

    /**
     * @return string
     */
    private function baseTakenCompleteSearch()
    {
        $sql =
            "SELECT t, u, c, r, p, com FROM %s t 
              JOIN t.user u
              JOIN t.city c 
              JOIN c.region r
              LEFT JOIN t.participates p
              LEFT JOIN t.comments com
              WHERE t.startDate >= :now";
        $dql = sprintf($sql, $this->getClassName());

        return $dql;
    }
}
